Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Compiled class file\n*.class\n\n# Log file\n*.log\n\n# BlueJ files\n*.ctxt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.jar\n*.war\n*.nar\n*.ear\n*.zip\n*.tar.gz\n*.rar\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n*.xml\n*.iml\n.idea/misc.xml\nuntitled.iml\nout/production/.DS_Store\nout/production/untitled/firstDeliverable/.DS_Store\nout/production/untitled/.DS_Store\n.DS_Store\ncitiesLibrary.json\ncitiesLibraryFormGson.json.json\ntarget/
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision afaf6349e02615a226e52cac95b14771a21155d2)
+++ b/.gitignore	(date 1641415426758)
@@ -22,7 +22,7 @@
 # virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
 hs_err_pid*
 
-*.xml
+
 *.iml
 .idea/misc.xml
 untitled.iml
Index: src/main/java/gr/hua/oopii/travelAgency/GUI/GUIController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package gr.hua.oopii.travelAgency.GUI;\n\nimport gr.hua.oopii.travelAgency.Control;\nimport gr.hua.oopii.travelAgency.exception.*;\nimport javafx.beans.value.ChangeListener;\nimport javafx.beans.value.ObservableValue;\nimport javafx.event.ActionEvent;\nimport javafx.event.Event;\nimport javafx.event.EventHandler;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.Node;\nimport javafx.scene.Scene;\nimport javafx.scene.chart.CategoryAxis;\nimport javafx.scene.chart.LineChart;\nimport javafx.scene.chart.NumberAxis;\nimport javafx.scene.chart.XYChart;\nimport javafx.scene.control.*;\nimport javafx.scene.image.Image;\nimport javafx.scene.layout.VBox;\nimport javafx.scene.paint.Color;\nimport javafx.scene.text.Font;\nimport javafx.scene.text.Text;\nimport javafx.scene.text.TextAlignment;\nimport javafx.stage.FileChooser;\nimport javafx.stage.Modality;\nimport javafx.stage.Stage;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.*;\n\nimport static gr.hua.oopii.travelAgency.Control.updateData;\n\npublic class GUIController implements Initializable {\n\n    public Spinner<Integer> ageSpinner;\n    public TextArea recommendationsTextArea;\n    public CheckBox uppercaseCheckBox;\n    public ChoiceBox<String> sortChoiceBox;\n    public TextArea citiesLibraryTextArea;\n    public Tab citiesLibraryTab;\n    public Tab recommendTab;\n    public TabPane tabs;\n    public TextField candidateCityName;\n    public Button addCandidateCityButton;\n    public TextField candidateCityISO;\n    public Text addCandidateCityNotification;\n    public Tab addCandidateCityTab;\n    public TextArea citiesLibraryByDays;\n    @FXML\n    private LineChart<String, Integer> lineChartCitiesLibrary;\n    @FXML\n    private CategoryAxis x;\n    @FXML\n    private NumberAxis y;\n\n\n    @FXML\n    protected void gainRecommendationsButtonAction() throws NoRecommendationException, StopRunningException {\n        recommendationsTextArea.setText(Control.recommendationToString(Control.runPerceptron(ageSpinner.getValue(), uppercaseCheckBox.isSelected())));\n        sortChoiceBox.getSelectionModel().select(Control.retrieveDefaultSortingOption());\n        tabs.getSelectionModel().select(recommendTab);\n        Control.mainLogger.finest(\"GUI selection\");\n    }\n\n    @FXML\n    protected void clearButtonAction(){\n        ageSpinner.getValueFactory().setValue(16);\n        recommendationsTextArea.clear();\n        Control.mainLogger.info(\"GUI selection\");\n    }\n\n    @FXML\n    protected void updateDataButtonAction() throws Throwable {\n        Control.updateData();\n        Control.mainLogger.info(\"GUI selection\");\n    }\n\n    @FXML\n    protected void saveButtonAction() {\n        Control.mainLogger.info(\"GUI selection\");\n        Control.mainLogger.info(\"Saving data to Json: \" + Control.saveCitiesLibraryJson());\n    }\n\n    @FXML\n    protected void saveAsButtonAction() {\n        FileChooser fileChooser = new FileChooser();\n\n        fileChooser.setTitle(\"Select file to save data\");\n        fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(\"Json files\", \"*.json\"));\n\n        File file = fileChooser.showSaveDialog(new Stage());\n        if (file != null) {\n            Control.mainLogger.info(\"Saving data to \" + file.getAbsolutePath() + \": \" + Control.saveCitiesLibraryJson(file));                 //4 DEBUGGING reasons\n        } else {\n            Control.mainLogger.info(\"Saving data to custom JSON: false \");\n        }\n    }\n\n    @FXML\n    protected void loadAsButtonAction() {\n        FileChooser fileChooser = new FileChooser();\n\n\n        fileChooser.setTitle(\"Select file to read data\");\n        fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(\"Json files\", \"*.json\"));\n\n        File file = fileChooser.showOpenDialog(new Stage());\n        if (file != null) {\n            Control.mainLogger.info(\"Loading data from \" + file.getAbsolutePath() + \": \" + Control.retrieveCitiesLibraryJson(file));                 //4 DEBUGGING reasons\n        } else {\n            Control.mainLogger.info(\"Loading data from custom JSON: false \");\n        }\n    }\n\n\n    @FXML\n    protected void loadDataButtonAction() {\n        Control.mainLogger.info(\"Loading data from default JSON: \" + Control.retrieveCitiesLibraryJson());    //4 DEBUGGING reasons\n    }\n\n    @FXML\n    protected void updateCitiesLibraryTextArea() throws CitiesLibraryEmptyException {\n        citiesLibraryTextArea.setText(Control.cityLibraryToString());\n        Control.mainLogger.info(\"GUI selection\");\n    }\n\n    @FXML\n    protected void addCandidateCityButtonAction() {\n        Control.mainLogger.info(\"GUI selection\");\n        addCandidateCityNotification.setText(\"Please wait ...\");\n        addCandidateCityNotification.setFill(Color.GRAY);\n        addCandidateCityNotification.setVisible(true);\n\n        Date res = null;\n        try {\n            res = Control.addCandidateCity(candidateCityName.getText(), candidateCityISO.getText());\n        } catch (NoSuchCityException e) {\n            addCandidateCityNotification.setText(\"We couldn't found \" + candidateCityName.getText() + \" at \" + candidateCityISO.getText());\n            addCandidateCityNotification.setFill(Color.RED);\n            addCandidateCityNotification.setVisible(true);\n            Control.mainLogger.info(\"City: \" + candidateCityName.getText() + \" at \" + candidateCityISO.getText() + \" wasn't found\");\n            return;\n        } catch (NoInternetException e) {\n            addCandidateCityNotification.setText(\"Please check your internet connection and try again.\");\n            addCandidateCityNotification.setFill(Color.RED);\n            addCandidateCityNotification.setVisible(true);\n            Control.mainLogger.warning(e.getMessage());\n            return;\n        } catch (IllegalArgumentException e) {\n            addCandidateCityNotification.setText(\"Please insert city name and country ISO\");\n            addCandidateCityNotification.setFill(Color.RED);\n            addCandidateCityNotification.setVisible(true);\n            Control.mainLogger.warning(e.getMessage());\n            return;\n        }\n\n        if (res == null) {\n            addCandidateCityNotification.setText(candidateCityName.getText() + \" added successfully to Cities Library\");\n            addCandidateCityNotification.setFill(Color.GREEN);\n            Control.mainLogger.info(candidateCityName.getText() + \" added successfully to Cities Library\");\n        } else {\n            addCandidateCityNotification.setText(candidateCityName.getText() + \" already exists in Cities Library since \" + res + \".\");\n            addCandidateCityNotification.setFill(Color.GRAY);\n            Control.mainLogger.info(candidateCityName.getText() + \" already exists in Cities Library since \" + res);\n        }\n        addCandidateCityNotification.setVisible(true);\n        try {\n            updateCitiesLibraryTextArea();\n        } catch (CitiesLibraryEmptyException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void initialize(URL url, ResourceBundle resourceBundle) {\n        try {\n            Control.initLogger();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            Control.init(\"Athens\", \"GR\");\n        } catch (StopRunningException e) {\n            e.printStackTrace();\n        } catch (NoSuchCityException e) {\n            Control.mainLogger.severe(\"GUI:\" + e);\n        }\n\n        if (!Control.retrieveCitiesLibraryJson()) {\n            final Stage dialog = new Stage();\n\n            Image icon = new Image(Objects.requireNonNull(getClass().getResourceAsStream(\"warning-icon.png\")));\n            dialog.getIcons().add(icon);\n\n            dialog.setTitle(\"Warning\");\n            dialog.initModality(Modality.WINDOW_MODAL);\n\n            Control.mainLogger.warning(\"Error retreating data from default JSON file\");\n\n            //dialog.initOwner(primaryStage);\n            VBox dialogVbox = new VBox(20);\n            Scene dialogScene = new Scene(dialogVbox);\n\n            Button downloadDataButton = new Button(\"Download data from web\");\n            Button loadDataButton = new Button(\"Load data from Json file\");\n\n            downloadDataButton.setOnAction(e -> {\n                dialogVbox.getChildren().add(new Text(\"Please wait wile downloading data...\")); //FIXME: Message appears after complete download\n                try {\n                    Control.initCitiesLibrary();\n                } catch (StopRunningException ex) {\n                    ex.printStackTrace();\n                }\n                dialog.hide();\n                Control.mainLogger.finest(\"GUI election: Download data from web\");\n            });\n\n            loadDataButton.setOnAction(e -> {\n                loadAsButtonAction();\n                dialog.hide();\n                Control.mainLogger.finest(\"GUI election: Load data from Json file\");\n            });\n\n            Text text = new Text(\"We couldn't load data from default file. \\nPlease select an option to proceed:\");\n            text.setFont(new Font(\"Arial\", 15));\n            text.setTextAlignment(TextAlignment.CENTER);\n\n            dialogVbox.getChildren().addAll(text, downloadDataButton, loadDataButton);\n\n            dialog.setScene(dialogScene);\n            dialog.setAlwaysOnTop(true);\n            dialog.setResizable(false);\n            dialog.setX(10);\n            dialog.alwaysOnTopProperty();\n            dialog.show();\n        }\n\n        SpinnerValueFactory<Integer> spinnerValueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(16, 115);\n        spinnerValueFactory.setValue(16);\n        ageSpinner.setValueFactory(spinnerValueFactory);\n\n\n        sortChoiceBox.getItems().addAll(Control.retrieveSortingOptions());\n        sortChoiceBox.getSelectionModel().selectedIndexProperty().addListener(new ChangeListener<>() {\n            @Override\n            public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n                try {\n                    recommendationsTextArea.setText(Control.sortRecommendation((int) newValue));\n                } catch (NoRecommendationException e) {\n                    e.printStackTrace();\n                }\n            }\n        }); //TODO: For optimization reasons, we can modify it so it want listen the auto value change (when new ageSpinner added)\n\n        addCandidateCityTab.setOnSelectionChanged(new EventHandler<Event>() {\n            @Override\n            public void handle(Event event) {\n                candidateCityName.clear();\n                candidateCityISO.clear();\n                addCandidateCityNotification.setVisible(false);\n                try {\n                    updateCitiesLibraryTextArea();\n                } catch (CitiesLibraryEmptyException e) {\n                    try {\n                        Control.initCitiesLibrary();\n                    } catch (StopRunningException ex) {\n                        ex.printStackTrace();\n                    }\n                }\n            }\n        });\n\n\n        citiesLibraryTab.setOnSelectionChanged(new EventHandler<Event>() {\n            @Override\n            public void handle(Event event) {\n                XYChart.Series series = new XYChart.Series();\n                TreeMap<String, String> weekCityCatalogue = Control.makeWeekCityCatalogue();\n                citiesLibraryByDays.setText(Control.presentWeekCityCatalogue(weekCityCatalogue));\n\n                TreeMap<String, Integer> weekCityCatalogueStatistics;\n                weekCityCatalogueStatistics = Control.statisticsWeekCityCatalogue(weekCityCatalogue);\n                Iterator<Map.Entry<String, Integer>> it = weekCityCatalogueStatistics.entrySet().iterator();\n\n                for (Iterator<Map.Entry<String, Integer>> iter = it; iter.hasNext(); ) {\n                    Map.Entry<String, Integer> tmp = it.next();\n                    series.getData().add(new XYChart.Data(tmp.getKey().substring(0, 3), tmp.getValue()));\n                }\n                System.out.println(Control.statisticsWeekCityCatalogue(weekCityCatalogue).toString());\n                lineChartCitiesLibrary.setLegendVisible(false);\n                lineChartCitiesLibrary.setAnimated(false);\n                lineChartCitiesLibrary.getData().clear();\n                lineChartCitiesLibrary.getData().add(series);\n            }\n        });\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/gr/hua/oopii/travelAgency/GUI/GUIController.java b/src/main/java/gr/hua/oopii/travelAgency/GUI/GUIController.java
--- a/src/main/java/gr/hua/oopii/travelAgency/GUI/GUIController.java	(revision afaf6349e02615a226e52cac95b14771a21155d2)
+++ b/src/main/java/gr/hua/oopii/travelAgency/GUI/GUIController.java	(date 1641408841534)
@@ -59,10 +59,17 @@
 
     @FXML
     protected void gainRecommendationsButtonAction() throws NoRecommendationException, StopRunningException {
-        recommendationsTextArea.setText(Control.recommendationToString(Control.runPerceptron(ageSpinner.getValue(), uppercaseCheckBox.isSelected())));
-        sortChoiceBox.getSelectionModel().select(Control.retrieveDefaultSortingOption());
+        Control.mainLogger.info("GUI selection");
+        try{
+            recommendationsTextArea.setText(Control.recommendationToString(Control.runPerceptron(ageSpinner.getValue(), uppercaseCheckBox.isSelected())));
+            recommendationsTextArea.setStyle("-fx-text-fill: black;");
+            sortChoiceBox.getSelectionModel().select(Control.retrieveDefaultSortingOption());
+        } catch (NoRecommendationException e){
+            recommendationsTextArea.setText("There are no recommendations at the time for the age of "+ageSpinner.getValue()+".");
+            recommendationsTextArea.setStyle("-fx-text-fill: red;");
+            Control.mainLogger.warning("No recommendations for traveller with age: "+ ageSpinner.getValue());
+        }
         tabs.getSelectionModel().select(recommendTab);
-        Control.mainLogger.finest("GUI selection");
     }
 
     @FXML
